<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>欢迎</title>
    <url>/2020/welcome/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="欢迎来到我的网络空间。"><a href="#欢迎来到我的网络空间。" class="headerlink" title="欢迎来到我的网络空间。"></a>欢迎来到我的网络空间。</h2><p>在这里我将记录我学到的、我看到的和我思考的。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2021/about/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote>
<p>一个和自己过不去的秃头少年。</p>
</blockquote>
<p>姓名：xk<br>现居：湖北<br>GitHub: <a href="https://github.com/yueshang-anran">yueshang-anran</a></p>
<span id="more"></span>

<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/preview.jpg" alt="preview"></p>
]]></content>
      <tags>
        <tag>about me</tag>
      </tags>
  </entry>
  <entry>
    <title>穷查理宝典</title>
    <url>/2021/ckr7yg8ao000x3sn0453a9s3a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="读书笔记：穷查理宝典"><a href="#读书笔记：穷查理宝典" class="headerlink" title="读书笔记：穷查理宝典"></a>读书笔记：穷查理宝典</h1><p>其实这应该改成听书笔记，我没有买这本书，是在手机上听的，不过有闲钱了，我一定会买这本书。断断续续吧，最近才听完这本书，里面一些观点给我造成很大的震撼。凭我记忆啊，让我想想，书上都教了我什么？</p>
<p>额，</p>
<ul>
<li>人们应该掌握普世的智慧；</li>
<li>要掌握跨学科的知识；</li>
<li>终生学习；</li>
<li>不要当 铁锤人；</li>
<li>有些事情反过来考虑会变得简单，如：我无法告诉你怎样做一定会成功，但是可以告诉你怎样做一定会失败；</li>
<li>大多时候说服一个人，从利益出发是最有效的；</li>
<li>要得到你想要的某样东西，最可靠的办法是让你自己配得起它；</li>
<li>还讲了一些心理学现象<ul>
<li>好的激励机制有利于提高工作效率，不恰当的激励机制则能够导致人们在做坏事的时候觉得自己是正当的；</li>
<li>人类有以德报德、以怨报怨的倾向；</li>
<li>被剥夺超级反应：失去造成的伤害比得到带来的快乐多得多；</li>
<li>等等…</li>
</ul>
</li>
<li>不要无意义的去嫉妒别人，建议化嫉妒为力量，去超越别人，如我朋友说的这句话：支持我一路走过来的从来不是什么正能量，而是我的虚荣嫉妒不甘心（个人感觉还是有点过了）。</li>
</ul>
<p>当然了，书里还讲了芒格是怎么投资的，告诉我们穿越到过去，你怎样经营出可口可乐公司，之前的美国次贷危机是怎样产生的等等，有趣的金融故事。</p>
<p>总结来说：<strong>这是本好书！</strong></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>看书</tag>
      </tags>
  </entry>
  <entry>
    <title>挑战程序设计竞赛</title>
    <url>/2021/ckr7yg8ae000g3sn01x4scbej/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="读书笔记：挑战程序设计竞赛（第二版）"><a href="#读书笔记：挑战程序设计竞赛（第二版）" class="headerlink" title="读书笔记：挑战程序设计竞赛（第二版）"></a>读书笔记：挑战程序设计竞赛（第二版）</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>学校里有个老师天天上课阴阳怪气，还老讲他前女友的故事，还不让玩手机。无奈找了一本书看看，就是这本了。</p>
<h2 id="1-准备篇"><a href="#1-准备篇" class="headerlink" title="1.准备篇"></a>1.准备篇</h2><h3 id="POJ1852"><a href="#POJ1852" class="headerlink" title="POJ1852"></a>POJ1852</h3><p>我最早在大一的时候看到了这道题目，我还去问了当时的C语言老师怎么写，当然了，没有回复我答案。回到题目上来，这道题目想通了就很简单咯。</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210519193153498-1621423916448.png" alt="image-20210519193153498"></p>
<p>掉头 和 灵魂穿越般的过去是一样，那么这两种状态就一样嘛，显然后者状态好计算多了。感叹一句，这题真的经典。</p>
<h3 id="优化抽签问题"><a href="#优化抽签问题" class="headerlink" title="优化抽签问题"></a>优化抽签问题</h3><p>原本是（$n^4$）   通过二分搜索优化最内层循环（d = m - a - b - c）   变成 （$n^3logn$）</p>
<p>​    再优化内侧的两个循环，这两个循环在检查是否有（c + d = m - a - b）</p>
<p>​    所以先枚举c + d 的（$n^2$）个结果，再排序，再二分搜索。注意啊，排序的时间复杂度原本是：$n^2log(n^2)=n^2*(2logn)=2n^2logn$，这个两倍完全太小了可以省略</p>
<p>​    最终就优化成：$n^2logn$</p>
<p>这不比背面经有趣？</p>
<h2 id="2-初级篇"><a href="#2-初级篇" class="headerlink" title="2.初级篇"></a>2.初级篇</h2><h3 id="2-1穷搜"><a href="#2-1穷搜" class="headerlink" title="2.1穷搜"></a>2.1穷搜</h3><p>P35使用数组来存储四个方向，这种表示挺有趣的，其他的没啥好说的。</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210519200439858.png" alt="image-20210519200439858"></p>
<h3 id="2-2贪心"><a href="#2-2贪心" class="headerlink" title="2.2贪心"></a>2.2贪心</h3><h4 id="2-2-1"><a href="#2-2-1" class="headerlink" title="2.2.1"></a>2.2.1</h4><p>P40，区间问题</p>
<ul>
<li>选最先结束的工作，这个思路太棒了</li>
</ul>
<h4 id="POJ3617"><a href="#POJ3617" class="headerlink" title="POJ3617"></a>POJ3617</h4><p>P44的思路没有说清楚，是有点问题的，他说如果相同，取哪个都可以</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210520085540061.png" alt="image-20210520085540061"></p>
<p>请看他给的样例 ACDBCB，当两个C进行选择时，是要选择后一个C的，因为后一个C的前一个字母是B。所以，相同时，要继续移进比较，选出小的那个（如果没有就随意了），再回来选择。</p>
<p>有趣的是：他给的代码确实是正确的思路，应验了那句话：Talk is cheap. Show me the code.</p>
<p>仔细看，他代码中的唯一一个for循环，里面并没有写相等的情况，这个for很巧妙哦</p>
<h4 id="POJ3069"><a href="#POJ3069" class="headerlink" title="POJ3069"></a>POJ3069</h4><p>思路很简单，不过一般人可能写不出来他这么清爽的代码</p>
<h4 id="POJ3253"><a href="#POJ3253" class="headerlink" title="POJ3253"></a>POJ3253</h4><p>我最开始想的是，先从大到小的顺序，再依次每次割除最大的那个，如下图所示：</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210520092224606.png" alt="image-20210520092224606"></p>
<p>题目只有三块板子，但凡多一点，这个思路就显示出问题了。</p>
<p>真没有想到啊，思路居然是二叉树。模板长度 * 节点深度 = 所求值 。amazing啊！</p>
<ul>
<li>来理清思路<ul>
<li>找到最短板和次最短板，合成一个新板，将这个新板的长度加入ans中，将最短板和次最短板删掉。</li>
<li>重复上述操作直到只有一块板子。</li>
</ul>
</li>
<li>来看看他的代码<ul>
<li>前面代码都正常，注意看这几行</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mii1 == N - <span class="number">1</span>) swap(mii1, mii2);</span><br><span class="line">L[mii1] = t;</span><br><span class="line">L[mii2] = L[N - <span class="number">1</span>];</span><br></pre></td></tr></tbody></table></figure>

<p>按照之前的思路，我们需要将合并的新板加进来，去掉两个板子。为了好写，我们使用了N–来控制板子的数量，这造成了一个问题，N - 1号板子会莫名消失，所以需要加进来，这里又出现了一个问题，如果N - 1号板子就是 最短板或次最短板 呢？那不是不用加进来了嘛，那咋办吗，写几个if进行嵌套判断？他给了个方法：合并后的板子替换掉mii1号板子，N - 1号板子替换掉mii2号板子（此时依旧没有解决  <strong>N - 1号板子就是 最短板或次最短板</strong>  的情况），再次之前进行一次判断，如果  N - 1号板子就是最短板，那就交换 mii1与mii2的值。完了？就这？注意理解哦，你要保证第二行L[mii1] = t 赋值成功，但是不需要保证第三行L[mii2] = L[N - 1]赋值成功，如果mii2号板子就是N-1号板子，那不是很好嘛，正好舍弃掉。但是啊，N-1号板子也可能是mii1号板子呀，所以就需要交换mii1与mii2的值咯。</p>
<ul>
<li>精准而优雅</li>
</ul>
<h3 id="2-3动态规划"><a href="#2-3动态规划" class="headerlink" title="==2.3动态规划=="></a><strong>==2.3动态规划==</strong></h3><p><em><strong>“状态这个概念在这里得到了很好的体现”</strong></em></p>
<h4 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h4><p>​    看他演变过程</p>
<ul>
<li>先是最容易想到的暴力搜索：一个物品有选和不选两种状态，然后进行枚举搜索，时间复杂度为$2^n$，显然这是一个很糟糕的选择</li>
<li>改进：找个数组将之前算出来的结果存起来，要用的时候直接读取就行了。注意：P52有个二叉树的图片，仔细看，每一层都只由下一层推出来，即：（4，0-5）推出（3，0-5），而（2，0-5）与（4，0-5）就没有啥关系了。所以，在计算（2，0-5）时，就没有必要存（4，0-5）了。这为后面dp数组从二维变成一维提供依据。</li>
<li>再改进：上一个步骤中是使用递归进行搜索的，但是可以用简单的二维数组完成此项搜索。为什么两个for循环可以完成，之前的递归搜索呢？还是上个步骤中说的：每一层都只由下一层推出来。这样，基础的dp模板就出现了</li>
</ul>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> dp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//记得初始化</span></span><br><span class="line">    <span class="keyword">for</span>(...){</span><br><span class="line">        <span class="keyword">for</span>(...)</span><br><span class="line">            <span class="comment">//递推式</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//根据递推式的不同写法，甚至会出现for循环中的变量从高到低变化（n..0）</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>其中最重要的是：写一个正确并且简洁的递推式</li>
</ul>
<h4 id="最长公共子序列问题（LCS）"><a href="#最长公共子序列问题（LCS）" class="headerlink" title="最长公共子序列问题（LCS）"></a>最长公共子序列问题（LCS）</h4><ul>
<li>既然是==公共==的子序列，那么咱们就考虑 s[i]==s[j] 和 s[i]!=s[j] 的情况。<ul>
<li>如果相等，dp [i] [j] = dp [i-1] [j-1] + 1  (我就不懂为啥要与dp [i] [j-1]、dp [i-1] [j]扯上关系，书上是用dp [i+1] [j+1]开始推导，我是用dp [i] [j]，这都无所谓的)</li>
<li>如果不等，那就取dp [i-1] [j] 和 dp [i] [j-1] 中的最大值了</li>
</ul>
</li>
</ul>
<h4 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h4><p>​    解释一下P59首行所说的重复部分</p>
<ul>
<li><p>看P58最下方的图片。当你计算dp [3] [3] 时，你将会有两次k值的计算，即k = 0 、1，所以你得计算dp[2] [3]                和dp [2] [1]的值然后得出dp [3] [3]的最终值；当你计算dp [3] [5]，有三次k值的计算，即k = 0 、1、2，所以你得计算dp[2] [5] 和 dp [2] [3] 和 dp [2] [1] 的值然后得出dp [3] [5]的最终值。发现了吗，dp [2] [3]已经计算过了，而dp [2] [5]又计算了一遍，所以这些就是重复部分，就是图上画箭头的部分了。</p>
</li>
<li><p>然后就是将二维数组变成一维。既然dp [i + 1] [j] 的递推式里就只有dp [i] [j] 和 dp [i + 1] [j - w[i] ]，那就无需存dp [i + 1] 之前的数据了。</p>
</li>
<li><p>P60中间的代码乍一看很厉害，后来想了想好像也没有那么厉害，还没有直接写成一维的数组简介。</p>
</li>
</ul>
<p>==如无必要，勿增实体==</p>
<h4 id="完全背包变式"><a href="#完全背包变式" class="headerlink" title="完全背包变式"></a>完全背包变式</h4><ul>
<li><p>写了这么久的代码。发现了没有，一个二维数组有三个变量可以传递信息，dp [ i ] [ j ] ，i 可以可以代表一个信息，j 可以代表一个信息，dp [ i ] [ j ] 的值可以代表一个信息。</p>
</li>
<li><p>原来dp [] [] 三个信息  dp值、一维i、二维j  代表着  v 、n 、w ，变成了代表 w 、n 、v 了。给dp的值赋予规则，让其携带更多信息（dp值为INF时，代表着不存在的情况）。</p>
</li>
<li><p>虽然，没有在dp[] []数组的确定位置的算出答案，但是知道答案就在dp数组中，最后遍历数组即可知道答案，这种对获取答案的妥协，却可以简便获取dp数组的过程。</p>
</li>
</ul>
<h4 id="多重部分和问题"><a href="#多重部分和问题" class="headerlink" title="多重部分和问题"></a>多重部分和问题</h4><p>P63说：</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210523154444802.png" alt="image-20210523154444802"></p>
<p>这就是信息存储的选择了。</p>
<p>这题  dp的值  所代表的信息挺有趣的，代表着  用前i种数加和得到j时第i种数最多能剩余多少个(不能加和得到j的情况下为-1) 。这种常人难以想到的信息代表，后面经常出现。</p>
<p>注意这个递推式的中间项是小于等于0</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210523154852136.png" alt="image-20210523154852136"></p>
<h4 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h4><p>第一种$n^2$解法还是很好看懂的，第二种$nlogn$解法就难了亿点</p>
<ul>
<li>第二种对比于第一种，在dp数组的值上进行了革命性改动（其实和完全背包变式的套路一样）使得dp数组成为了一个有序数组，为二分搜索做准备。附上<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">力扣链接</a>，讲的清楚一些。</li>
<li>他在代码里用了个STL函数 lower_bound，这个函数是左闭右开的，用的是二分搜索，返回的是第一个大于k的<em><strong>指针</strong></em>，这就是为什么for循环里加*号后可以直接赋值的原因。最后输出减dp，是减dp首地址。</li>
</ul>
<h4 id="划分数"><a href="#划分数" class="headerlink" title="划分数"></a>划分数</h4><p>为什么这一章看得这么慢就是因为有这种题目的存在，完全看不懂递推式啊。（就是自己菜）</p>
<ul>
<li><p>这题目啊，应该这么理解：n个无区别物品放进m个盘子，允许存在空盘子，问有多少种放法。<a href="https://www.nowcoder.com/practice/4f0c1e21010e4d849bde5297148e81d9?tab=answerKey">类似题目</a></p>
</li>
<li><p>样例就代表着：1+1+2=1+3+0=2+2+0=4+0+0</p>
</li>
<li><p>这就好解释递推式了</p>
<ul>
<li><p>物品数 j 小于盘子数 i 时，必定有空盘子嘛，dp [ i ] [ j ] 就等于 dp [ j ] [ j ] </p>
</li>
<li><p>物品数 j 大于等于盘子数 i 时，可以出现没有空盘子，也可以出现空盘子</p>
<ul>
<li><p>没有空盘子时，dp [ i ] [ j ] 相当于在dp [ i ] [ j - i ] 的摆法上全部加一个盘子，</p>
<p>即   dp [ i ] [ j ] =dp [ i ] [ j - i ] </p>
</li>
<li><p>有空盘子时，dp [ i ] [ j ] 拿出一个盘子做空，其余继续摆就行了，可能你要问，拿俩个盘子做空不行吗？拿俩个盘子做空就是dp [ i - 2 ] [ j ] 的值，但是这个dp [ i - 1 ] [ j ]中就包含了这个值呀，你就重复计算了</p>
<p>所以此时dp [ i ] [ j ] = dp [ i - 1 ] [ j ] </p>
</li>
<li><p>最终 dp [ i ] [ j ] = （dp [ i ] [ j - i ] + dp [ i - 1 ] [ j ] ）% M</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="多重集组合数"><a href="#多重集组合数" class="headerlink" title="多重集组合数"></a>多重集组合数</h4><p>​    <strong>加油</strong></p>
<h3 id="2-4数据结构"><a href="#2-4数据结构" class="headerlink" title="2.4数据结构"></a>2.4数据结构</h3><h4 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h4><p>这都没啥好说的</p>
<h4 id="优先队列和堆"><a href="#优先队列和堆" class="headerlink" title="优先队列和堆"></a>优先队列和堆</h4><p>优先队列的定义是：<img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210705084754661.png" alt="image-20210705084754661"></p>
<p>所以看到了没，优先队列是没有固定形式的。但是为什么又总是用堆去做优先队列呢？因为堆能够高效的完成优先队列的操作啊。</p>
<p>那什么是堆呢？</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210705085408221.png" alt="image-20210705085408221"></p>
<p>看堆的实现，注意：堆在用<strong>数组</strong>存储，而之前的树或二叉树是在用节点存储用<strong>指针</strong>进行链接。</p>
<p>看堆的删除操作步骤，将最后一个数提上来，在向下排序交换。平常思路可能是：既然子节点必然大于父节点，那么去掉根节点后，最小值应该就在根节点的两个儿子节点中，将其中一个提上来就行了，那谁来补充这个空位呢？那就是这个空位下面的较小的儿子节点了，但是这破坏了堆结构，这个树不再是 从左到右紧凑排列了。</p>
<p>然后就是老生常谈的细节问题：</p>
<figure class="highlight c"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(i*<span class="number">2</span>+<span class="number">1</span>&lt;sz)	<span class="comment">//为什么不写成小于等于？因为sz表示的是个数，而i*2+1是节点编号 是从0开始的</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span>(b&lt;sz &amp;&amp; heap[b] &lt; heap[a]) a = b;	<span class="comment">//这在干啥？b&lt;sz是判断有无右儿子，heap[b] &lt; heap[a]是判断右儿子是否小于左儿子，总的来说就是找到两个儿子中最小的那个，并把编号赋给a</span></span><br></pre></td></tr></tbody></table></figure>

<h5 id="POJ2431"><a href="#POJ2431" class="headerlink" title="POJ2431"></a>POJ2431</h5><p>算是一个思维题目吧，关键就一句话：<img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210705101834202.png" alt="image-20210705101834202"></p>
<h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p>实现思路都没什么难点，只需要注意删除操作中的第三种情况：把左儿子的子孙中最大的节点提上来（P79）。</p>
<p>第三种情况就是，即存在左儿子又存在右儿子，谁来顶替被删除的节点？得在被删除节点的子孙中找到一个节点，满足下面条件：大于被删除节点的左儿子且小于被删除节点的右儿子。怎么找到这个节点呢？就是书上说的选择左儿子的子孙中最大的节点，其实选择右儿子的子孙中最小的节点也可以。</p>
<h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><p>好像没什么好补充的，直接看题目吧。1    </p>
<h5 id="POJ1182"><a href="#POJ1182" class="headerlink" title="POJ1182"></a><a href="http://poj.org/problem?id=1182">POJ1182</a></h5><p>书上有点狗，他给的输入解释了一波，题面也删减了，容易让人误解题意，建议去看原题。看完后再看书上的代码就容易多了。</p>
<h3 id="2-5图"><a href="#2-5图" class="headerlink" title="2.5图"></a>2.5图</h3><p>图应该是现实中用的最多的数据结构了，毕竟现实生活中很多东西都是无序的。记住图的两种表示，还有一些专业术语，就差不多了。</p>
<h5 id="最短路问题和最小生成树"><a href="#最短路问题和最小生成树" class="headerlink" title="最短路问题和最小生成树"></a>最短路问题和最小生成树</h5><p>​    这两个，我真的是不知道怎么说了吧，打比赛自学了一遍，之后数据结构课又讲这个，之后算法课还有这个，已经是滚瓜烂熟了。最具有戏剧性的是：面试别人问我，你有没有学图里面算法，我当时懵逼了，忘记了这玩意儿。还是简单的写一下吧。</p>
<h6 id="Bellman-Ford算法"><a href="#Bellman-Ford算法" class="headerlink" title="Bellman-Ford算法"></a>Bellman-Ford算法</h6><p>解决单源最短路径问题。就是维护一个一维数组不停的遍历边，看能否跟新这个一维数组。</p>
<h6 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h6><p>解决单源最短路径问题。在Bellman-Ford算法基础上就行改进，不再是无脑遍历，而是：找到最短路径已经确定的顶点，从这个顶点开始遍历。</p>
<h6 id="Floyd-Warshall算法"><a href="#Floyd-Warshall算法" class="headerlink" title="Floyd-Warshall算法"></a>Floyd-Warshall算法</h6><p>解决任意两点间的最短路径问题。就是维护一个二维数组不停的遍历边，看能否跟新这个二维数组。</p>
<h6 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h6><p>解决最小生成树问题。从某个顶点出发，选择与其相连的最小边，把他加进来。</p>
<h6 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h6><p>解决最小生成树问题。选择最小的边。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>读书</category>
      </categories>
      <tags>
        <tag>看书</tag>
      </tags>
  </entry>
  <entry>
    <title>Todo</title>
    <url>/2021/ckr7yg8al000r3sn04q1d3smo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="清单"><a href="#清单" class="headerlink" title="清单"></a>清单</h1><p>人都懒，难以自律，当然了我也是。不过啊，我这人比较信守承诺，正好将任务清单写下来，督促我完成，既然答应了就应该完成，纵使这是和我自己的约定。</p>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月1号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input disabled="" type="checkbox"> <del>跑步（下大雨）</del></li>
<li><input checked="" disabled="" type="checkbox"> 看书</li>
<li><input checked="" disabled="" type="checkbox"> 写博客</li>
<li><input checked="" disabled="" type="checkbox"> 看博客</li>
<li><input checked="" disabled="" type="checkbox"> 看项目</li>
<li><input checked="" disabled="" type="checkbox"> 听书</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月2号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input checked="" disabled="" type="checkbox"> 看书</li>
<li><input checked="" disabled="" type="checkbox"> 写博客</li>
<li><input checked="" disabled="" type="checkbox"> 听《穷查理宝典》</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月3号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input checked="" disabled="" type="checkbox"> 看书</li>
<li><input checked="" disabled="" type="checkbox"> 写博客</li>
<li><input checked="" disabled="" type="checkbox"> 听《穷查理宝典》</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月4号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input checked="" disabled="" type="checkbox"> 看书</li>
<li><input checked="" disabled="" type="checkbox"> 写博客</li>
<li><input checked="" disabled="" type="checkbox"> 靠墙站着防驼背</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月5号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input checked="" disabled="" type="checkbox"> 写博客</li>
<li><input checked="" disabled="" type="checkbox"> 靠墙站着</li>
<li><input checked="" disabled="" type="checkbox"> 不翘二郎腿</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>7月6号</strong></p>
<p>额，今天基本上没有搞学习，全程在看<a href="https://www.bilibili.com/video/BV1b64y1Q7Pz">《水浒传》精讲合集</a>，算是休息了吧。看完这个才发现，这108英雄好汉里，不一定都是好人，着实很真实啊。</p>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月7号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input checked="" disabled="" type="checkbox"> 跳绳</li>
<li><input checked="" disabled="" type="checkbox"> 看书，完结第二章</li>
<li><input checked="" disabled="" type="checkbox"> 写博客</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input disabled="" type="checkbox"> <strong>7月8号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input disabled="" type="checkbox"> <del>跳绳（ 腿太痛了）</del></li>
<li><input checked="" disabled="" type="checkbox"> 找资料</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月9号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input checked="" disabled="" type="checkbox"> 跳绳</li>
<li><input checked="" disabled="" type="checkbox"> 看资料</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>7月10号</strong></p>
<p>emm，昨天突然文明6白金版打0.8折，补票了一波，之前玩的都是原版和盗版</p>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月11号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 打赢文明6神级别电脑（这应该算是娱乐了😉）</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月12号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 早起</li>
<li><input checked="" disabled="" type="checkbox"> 跳绳</li>
<li><input checked="" disabled="" type="checkbox"> 看看继续看how2j</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>7月13号</strong></p>
<p>白天上网，下次别人喷我，我就说：喷我就能赢？</p>
<p>晚上打球，人确实是个神奇的生物，每次打晚羽毛球，总是右手很痛，最后左手和右手都会有肌肉。</p>
</li>
</ul>
<hr>
<ul>
<li><p><strong>7月14号</strong></p>
<p>打游戏，已删。</p>
<p>晚上看到一个有趣的css代码，显示出来的样式很有趣</p>
</li>
</ul>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span>{</span></span><br><span class="line"><span class="css">   <span class="attribute">width</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">height</span>:<span class="number">0px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-top-style</span>:solid;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-top-color</span>:red;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-top-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-left-style</span>:solid;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-left-color</span>:white;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-left-width</span>: <span class="number">10px</span>;   </span></span><br><span class="line"><span class="css">   <span class="attribute">border-bottom-style</span>:solid;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-bottom-color</span>:white;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-bottom-width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-right-style</span>:solid;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-right-color</span>:white;</span></span><br><span class="line"><span class="css">   <span class="attribute">border-right-width</span>: <span class="number">10px</span>;      </span></span><br><span class="line"><span class="css">  }</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<hr>
<ul>
<li><p><strong>7月15号</strong></p>
<p>陪我爸看病</p>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月16号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 起早</li>
<li><input checked="" disabled="" type="checkbox"> 看how2j</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input checked="" disabled="" type="checkbox"> <strong>7月17号</strong><ul>
<li><input checked="" disabled="" type="checkbox"> 继续看how2j</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x1 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> x2 = <span class="string">'5'</span>;</span><br><span class="line"><span class="keyword">var</span> y1 = <span class="keyword">new</span> <span class="built_in">String</span>(x1);</span><br><span class="line"><span class="keyword">var</span> y2 = <span class="keyword">new</span> <span class="built_in">String</span>(x2);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"变量x1的值是:"</span>+x1);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"变量x1的类型是:"</span>+(<span class="keyword">typeof</span> x1));</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"变量y1的值是:"</span>+y1);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"变量y1的类型是:"</span>+(<span class="keyword">typeof</span> y1));</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"变量x2的值是:"</span>+x2);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"变量x2的类型是:"</span>+(<span class="keyword">typeof</span> x2));</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"变量y2的值是:"</span>+y2);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"变量y2的类型是:"</span>+(<span class="keyword">typeof</span> y2));</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;br&gt;"</span>);</span><br></pre></td></tr></tbody></table></figure>

<p>最开始我看到一段代码中写道：var y = new String(5);后来我又看到一段代码中写道：var y = new String(‘5’);我当时在想，这String()里面到底加不加引号，后来我明白了，加与不加对于y来说没啥区别，这个String()中是可以传不同类型的参数的，就相当于Java的泛型嘛。上面代码告诉我们，new 出来的String是<strong>对象String</strong>和基本数据类型中的<strong>基本类型String</strong>是不一样的String。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>起始资金<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">'10000'</span>&gt;</span> ￥<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>每年收益<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">'5'</span>&gt;</span> %<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p>第五行应该写&lt;/tr，但是不写也能运行，这都得感谢浏览器，他对错误代码进行了修正。</p>
<hr>
<ul>
<li><input disabled="" type="checkbox"> <strong>7月18号</strong><ul>
<li><input disabled="" type="checkbox"> 看完js章节</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><input disabled="" type="checkbox"> <strong>7月19号</strong><ul>
<li><input disabled="" type="checkbox"> </li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
        <category>todo</category>
      </categories>
      <tags>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>文明6</title>
    <url>/2021/ckr7yg8ag000k3sn0623g2bee/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="千古一帝"><a href="#千古一帝" class="headerlink" title="千古一帝"></a>千古一帝</h2><p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/20210628155033.png" alt="20210628155033"></p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/20210628160427.png" alt="20210628160427"></p>
<p><span class="github-emoji"><span>😜</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>文明6</tag>
      </tags>
  </entry>
  <entry>
    <title>network</title>
    <url>/2021/ckr7yg8bl00213sn01j34buor/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>之前也学过计算机网络，那时候疫情在家上的网课，没怎么认真学。一直也没有太把这个当回事，上个月面试被问到了这个，当时连网络有哪些层都答不上来，就挺尴尬的。前几天，在知乎刷到，有人推荐<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=1">湖南科技大学的计算机网络课程</a>很不错，就趁着周末空闲学了一下，然后写下了这份笔记。笔记里的所有图片都是我在视频里截图的，笔记不对网络涉及的算法深究，由于我不考研，也就没有必要死记住那些网络中涉及的参数、视频中出现的考研题目和各协议的报文格式（我可没有背书的天赋）。</p>
<h2 id="1-概况"><a href="#1-概况" class="headerlink" title="1. 概况"></a>1. 概况</h2><h3 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h3><p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515160531889.png" alt="image-20210515160531889"></p>
<p>​    报文传输已经很少使用了，因为需要路由器一次缓存所有数据，现在的数据都挺大的，这种缓存的行为很不友好。</p>
<p>​    分组传输可以看成报文传输的分割版。</p>
<h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515160818295.png" alt="image-20210515160818295"></p>
<h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515160948260.png" alt="image-20210515160948260"></p>
<ul>
<li><p>物理层</p>
<p>​    采用怎样的物理接口</p>
</li>
<li><p>数据链路层</p>
<p>​    数据在链路上将怎样传输</p>
</li>
<li><p>网络层</p>
<p>​    如何识别各网络中的各主机</p>
</li>
<li><p>运输层</p>
<p>​    解决进程之间基于网络的通信问题（即：发过来的包要给那个进程呢）</p>
</li>
<li><p>应用层</p>
<p>​    按照协议标准编写应用程序</p>
</li>
</ul>
<h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515170517893.png" alt="image-20210515170517893"></p>
<p>路由器没有应用程序，所以少了上面两层</p>
<h4 id="else"><a href="#else" class="headerlink" title="else"></a>else</h4><p><em><strong>协议是水平的，服务是垂直的。</strong></em></p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515171703810.png" alt="image-20210515171703810"></p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515172037421.png" alt="image-20210515172037421"></p>
<h3 id="结合现实"><a href="#结合现实" class="headerlink" title="结合现实"></a>结合现实</h3><ul>
<li><p>卖家宣传的GB容量是用十进制算出来的，即 1GB = 1000MB，而不是 1GB = $2^{10}$MB，所以买回来的东西会缺斤少两</p>
</li>
<li><p>家里的带宽省略了末尾的比特每秒，如经常说的1000M的宽带，其实是最高速率为1000Mb/s。并不是带宽多高你就能享用多高的速率的，速率由设备里最小速率决定的。</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515201819397.png" alt="image-20210515201819397"></p>
</li>
</ul>
<h2 id="2-物理层"><a href="#2-物理层" class="headerlink" title="2. 物理层"></a>2. 物理层</h2><h3 id="物理层解决的问题"><a href="#物理层解决的问题" class="headerlink" title="物理层解决的问题"></a>物理层解决的问题</h3><p>​    解决比特0和1在线路上传输的问题    </p>
<h3 id="传输媒体"><a href="#传输媒体" class="headerlink" title="传输媒体"></a>传输媒体</h3><ul>
<li><p>导引型传输媒体（就是用 ”线“ ）</p>
<blockquote>
<p>同轴电缆、双绞线、光纤、电力线等</p>
</blockquote>
</li>
<li><p>非导引型传输媒体（最常见的使用就是WIFI了）</p>
<blockquote>
<p>无线电波、红外线、可见光等</p>
</blockquote>
</li>
</ul>
<h3 id="结合现实-1"><a href="#结合现实-1" class="headerlink" title="结合现实"></a>结合现实</h3><ul>
<li>双绞线的选购</li>
</ul>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515202301345.png" alt="image-20210515202301345"></p>
<ul>
<li><p>电台</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515204716886.png" alt="image-20210515204716886"></p>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210515205552329.png" alt="image-20210515205552329"></p>
<h2 id="3-数据链路层"><a href="#3-数据链路层" class="headerlink" title="3.数据链路层"></a>3.数据链路层</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​    数据链路层一帧为单位传输和处理数据</p>
<h3 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h3><p>​    给上层交付的协议数据单元添加帧头和帧尾使之成为帧</p>
<p>数据链路层特点：透明传输（即上层可以传输任何数据，就算上层传输的数据包含帧头或帧尾，数据链路层也能通过某些方法识别出正确的 帧 ）<a href="https://www.bilibili.com/video/BV1c4411d7jb?p=22">视频详解</a></p>
<h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><ul>
<li>奇偶校验</li>
<li>循环冗余校验</li>
</ul>
<h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="==可靠传输=="></a>==可靠传输==</h3><blockquote>
<ul>
<li><p>运输层</p>
<ul>
<li>TCP向其上层提供面向连接的可靠传输服务</li>
<li>UDP向其上层提供无连接、不可靠传输服务</li>
</ul>
</li>
<li><p>网际层</p>
<ul>
<li>IP向其上层提供无连接、不可靠传输服务</li>
</ul>
</li>
<li><p>网络接口层</p>
<ul>
<li>使用PPP协议的数据链路层==向上不提供可靠传输服务==</li>
<li>802.11无线局域网要求数据链路层实现可靠传输</li>
<li>以太网不要求数据链路层实现可靠传输</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="可靠传输的实现机制"><a href="#可靠传输的实现机制" class="headerlink" title="可靠传输的实现机制"></a>可靠传输的实现机制</h4><ul>
<li><p>停止-等待协议SW</p>
<ul>
<li>信道利用率很低</li>
</ul>
</li>
<li><p>回退N帧协议GBN</p>
<ul>
<li>就是搞了两个窗口进行发送的控制</li>
<li>由于回退N帧协议的特性,当通信线路质量不好时,其信道利用率井不比停止-等待协议高。</li>
</ul>
</li>
<li><p>选择重传协议SR</p>
<ul>
<li>接收窗口尺寸不应该大于发送窗口</li>
</ul>
</li>
</ul>
<h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><p>一般情况下，用户主机会包含两个网络适配器：有线局域网适配器（<strong>有线网卡</strong>）和无线局域网适配器（<strong>无线网卡</strong>)。每个网络适配器都有一个全球唯一的MAC地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的MAC地址。综上所述，==严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识==。如：电脑上的以太网接口、WiFi接口、蓝牙接口等，都各分配了一个单播MAC地址。</p>
<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul>
<li>IP地址是因特网(Internet)上的主机和路由器所使用的地址，用于标识两部分信息：<ul>
<li>网络编号：标识因特网上数以百万计的网络</li>
<li>主机编号：标识同一网络上不同主机（或路由器各接口）</li>
</ul>
</li>
</ul>
<p>很显然MAC地址不具备区分不同网络的功能，但是IP地址可以。</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210516143544408.png" alt="image-20210516143544408"></p>
<p>疑问：</p>
<p>​    设备怎么知道 下一跳的MAC地址为多少呢？即如何通过IP地址找到其对应的MAC地址？</p>
<h3 id="地址解析协议ARP（网际层）"><a href="#地址解析协议ARP（网际层）" class="headerlink" title="地址解析协议ARP（网际层）"></a>地址解析协议ARP（网际层）</h3><ul>
<li>源主机在自己的ARP高速缓存表中查找目的主机的IP地址所对应的MAC地址，若找到了，则可以封装MAC帧进行发送；若找不到，则发送ARP请求(封装在广播MAC帧中)</li>
<li>目的主机收到ARP请求后，将源主机的IP地址与MAC地址记录到自己的ARP高速缓存表中，然后给源主机发送ARP响应(封装在单播MAC帧中)，ARP响应中包含有目的主机的IP地址和MAC地址</li>
<li>源主机收到ARP响应后，将目的主机的IP地址与MAC地址记录到自己的ARP高速缓存表中，然后就可以封装之前想发送的MAC帧并发送给目的主机</li>
<li><em>其实就是在网络里喊一声谁认识这个IP地址</em></li>
</ul>
<h3 id="集线器和交换机"><a href="#集线器和交换机" class="headerlink" title="集线器和交换机"></a>集线器和交换机</h3><ul>
<li>集线器==只工作在物理层==，它的每个接口仅简单地转发比特，不进行碰撞检测(由各站的网卡检测)；集线器会将单播帧传输到总线上的各个主机。</li>
<li>交换机工作在物理层和数据链路层；交换机会将单播帧转发给目的主机，而不是发给网络中的其他各个主机</li>
</ul>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210516151821850.png" alt="image-20210516151821850"></p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210516152124738.png" alt="image-20210516152124738"></p>
<h3 id="生成树协议STP"><a href="#生成树协议STP" class="headerlink" title="生成树协议STP"></a>生成树协议STP</h3><ul>
<li>以太网交换机使用生成树协议STP(Spanning Tree Protocol)，可以在增加冗余链路来提高网络可靠性的同时又避免网络环路带来的各种问题。<ul>
<li>不论交换机之间采用怎样的物理连接，交换机都能够自动计算并构建一个逻辑上没有环路的网络，其逻辑拓扑结构必须是树型的（无逻辑环路）</li>
<li>当首次连接交换机或网络物理拓扑发生变化时（有可能是人为改变或故障），交换机都将进行生成树的重新计算。</li>
</ul>
</li>
</ul>
<h3 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h3><p>虚拟局域网VLAN（Virtual Local Area Network）是一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。</p>
<p>具体实现略</p>
<h2 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4.网络层"></a>4.网络层</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul>
<li>网络层的主要任务是实现网络互连，进而实现数据包在各网络之间的传输。</li>
</ul>
<h3 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h3><ul>
<li>面向连接的虚电路服务（不流行了）</li>
<li>无连接的数据报服务（主流）</li>
</ul>
<h3 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h3><h4 id="分类编址的IPv4地址"><a href="#分类编址的IPv4地址" class="headerlink" title="分类编址的IPv4地址"></a>分类编址的IPv4地址</h4><ul>
<li><p>A类地址（0开头）</p>
<ul>
<li>8位网络号，24位主机号</li>
</ul>
</li>
<li><p>B类地址（10开头）</p>
<ul>
<li>16位网络号，16位主机号</li>
</ul>
</li>
<li><p>C类地址（110开头）</p>
<ul>
<li>24位网络号，8位主机号</li>
</ul>
</li>
<li><p>D类地址（1110开头）</p>
<ul>
<li>多播地址</li>
</ul>
</li>
<li><p>E类地址（1111开头）</p>
<ul>
<li>保留为今后使用</li>
</ul>
</li>
</ul>
<h4 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h4><p>​    为了解决IP地址浪费的问题而生；在分类编址的IPv4地址的基础上划分子网。</p>
<h5 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h5><ul>
<li><p>32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号</p>
<ul>
<li>子网掩码使用连续的比特1来对应网络号和子网号</li>
<li>子网掩码使用连续的比特0来对应主机号</li>
<li>将划分子网的IPv4地址与其相应的子网掩码进行逻辑与运算就可得到IPv4地址所在子网的网络地址</li>
</ul>
<p>主机号全为0 为 该网络的 <strong>网络地址</strong></p>
<p>主机号全为1 为 该网络的 <strong>广播地址</strong></p>
<p>这两个地址是不能分配出去的</p>
</li>
</ul>
<h4 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h4><ul>
<li><p>1993年，IETF发布了无分类域间路由选择CIDR（Classless Inter-Domain Routing）</p>
</li>
<li><p>CIDR使用“斜线记法”，或称CIDR记法。即在IPv4地址后面加上斜线“/”，在斜线后面写上网络前缀所占的比特数量。</p>
<ul>
<li>【举例】128.14.35.7 / 20</li>
</ul>
</li>
<li><p>路由聚合（构造超网）</p>
<ul>
<li>就是找到共同前缀</li>
</ul>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210516165427256.png" alt="image-20210516165427256"></p>
</li>
<li><p>网络前缀越长，地址块越小，路由越具体</p>
</li>
<li><p>若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，这称为最长前缀匹配，因为这样的路由更具体</p>
</li>
</ul>
<h4 id="IP数据报的发送和转发"><a href="#IP数据报的发送和转发" class="headerlink" title="IP数据报的发送和转发"></a>IP数据报的发送和转发</h4><ul>
<li><p>主机发送IP数据报</p>
<ul>
<li>为主机指定一个路由器帮忙转发IP数据报，这个路由器的地址称为：默认网关</li>
</ul>
</li>
<li><p>路由器转发IP数据报</p>
<ul>
<li><p>检查IP数据报首部是否出错</p>
<ul>
<li>若出错，则直接丢弃该IP数据报并通告源主机</li>
<li>若没有出错，则进行转发</li>
</ul>
</li>
<li><p>根据IP数据报的目的地址在路由表中查找匹配的条目</p>
<ul>
<li>若找到匹配的条目，则转发给条目中指示的下一跳</li>
<li>若找不到，则丢弃该IP数据报并通告源主机</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><code>路由器是隔离广播域的，并不会转发广播IP数据报</code></p>
<blockquote>
<p>中继器和集线器工作在物理层，既不隔离冲突域也不隔离广播域。</p>
<p>网桥和交换机(多端口网桥)工作在数据链路层，可以隔离冲突域，不能隔离广播域。</p>
<p>路由器工作在网络层,既隔离冲突域，也隔离广播域。</p>
</blockquote>
<h4 id="一些特殊的IP地址"><a href="#一些特殊的IP地址" class="headerlink" title="一些特殊的IP地址"></a>一些特殊的IP地址</h4><ul>
<li>地址 0.0.0.0<ul>
<li>只能作为源地址使用，表示“在本网络上的本主机”。封装有DHCP Discovery报文的IP分组的源地址使用0.0.0.0</li>
</ul>
</li>
<li>地址127.0.0.1（也可以在浏览器中打成localhost）<ul>
<li>以127开头且后面三个字节非“全0”或“全1”的IP地址是一类特殊的IPv4地址，既可以作为源地址使用，也可以作为目的地址使用，用于本地软件环回测试，例如常用的环回测试地址127.0.0.1；</li>
</ul>
</li>
<li>地址255.255.255.255<ul>
<li>只能作为目的地址使用，表示“只在本网络上进行广播(各路由器均不转发)”。</li>
</ul>
</li>
</ul>
<h3 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h3><ul>
<li>内部网关协议<ul>
<li>路由信息协议RIP</li>
<li>开放最短路径优先协议SOPF</li>
</ul>
</li>
<li>外部网关协议<ul>
<li>边界网关协议BGP</li>
<li>BGP只能是力求寻找一条能够到达目的网络且比较好的路由（不能兜圈子），而并非要寻找一条最佳路由</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210516202400420.png" alt="image-20210516202400420"></p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210516202947446.png" alt="image-20210516202947446"></p>
<h3 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h3><blockquote>
<p>全称：网际控制报文协议</p>
</blockquote>
<h4 id="五种ICMP差错报告报文"><a href="#五种ICMP差错报告报文" class="headerlink" title="五种ICMP差错报告报文"></a>五种ICMP差错报告报文</h4><ul>
<li>终点不可达：当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。具体可再根据ICMP的代码字段细分为目的网络不可达、目的主机不可达、目的协议不可达、目的端口不可达、目的网络未知、目的主机未知等13种错误。</li>
<li>源点抑制：当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢。</li>
<li>时间超过：<ul>
<li>当路由器收到一个目的IP地址不是自己的IP数据报，会将其生存时间TTL字段的值减1。</li>
<li>若结果不为0，则将该IP数据报转发出去；若结果为0，除丢弃该IP数据报外，还要向源点发送时间超过报文。</li>
<li>另外，当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，也会向源点发送时间超过报文。</li>
</ul>
</li>
<li>参数问题：当路由器或目的主机收到IP数据报后，根据其首部中的检验和字段发现首部在传输过程中出现了误码，就丢弃该数据报，并向源点发送参数问题报文。</li>
<li>改变路由（重定向）：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由）。</li>
</ul>
<h4 id="两种常用的ICMP询问报文"><a href="#两种常用的ICMP询问报文" class="headerlink" title="两种常用的ICMP询问报文"></a>两种常用的ICMP询问报文</h4><ul>
<li>回送请求和回答</li>
<li>时间戳请求和回答</li>
</ul>
<h4 id="ICMP应用举例"><a href="#ICMP应用举例" class="headerlink" title="ICMP应用举例"></a>ICMP应用举例</h4><ul>
<li>分组网间探测（ping命令）</li>
<li>跟踪路由（在windows中是tracert命令）</li>
</ul>
<h3 id="VPN和NAT"><a href="#VPN和NAT" class="headerlink" title="VPN和NAT"></a>VPN和NAT</h3><p>​    虚拟专用网VPN：利用公用的因特网作为本机构各专用网之间的通信载体，这样的专用网又称为虚拟专用网。</p>
<p>​    网络地址转换NAT：NAT能使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源。</p>
<h2 id="5-运输层"><a href="#5-运输层" class="headerlink" title="5.运输层"></a>5.运输层</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><ul>
<li>运输层直接为应用进程间的逻辑通信提供服务</li>
</ul>
<h3 id="运输层端口号"><a href="#运输层端口号" class="headerlink" title="运输层端口号"></a>运输层端口号</h3><ul>
<li>端口号：TCP/IP体系的运输层使用端口号来区分应用层的不同应用进程。（取值范围：0~65535）<ul>
<li>熟知端口号:0~1023，IANA把这些端口号指派给了TCP/IP体系中最重要的一些应用协议，例如：FTP使用21/20，HTTP使用80，DNS使用53。</li>
<li>登记端口号：1024~49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如：mysql默认端口号：3306（这是可以改的）。</li>
<li>短暂端口号：49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。</li>
</ul>
</li>
</ul>
<p>==端口号只具有本地意义，即端口号只是为了标识本计算机应用层中的各进程，在因特网中，不同计算机中的相同端口号是没有联系的。==</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210517090959873.png" alt="image-20210517090959873"></p>
<h3 id="UDP和TCP"><a href="#UDP和TCP" class="headerlink" title="UDP和TCP"></a>UDP和TCP</h3><ul>
<li>解释<ul>
<li>UDP：用户数据报协议（User Datagram Protocol）</li>
<li>TCP：传输控制协议（Transmission Control Protocol）</li>
</ul>
</li>
</ul>
<h4 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h4><blockquote>
<p>UDP                                                                                                        TCP</p>
<p>支持单播、多播以及广播                                                                      仅支持单播</p>
<p>是面向应用报文的（对交付下来的报文既不合并也不差分）            是==面向字节流==的</p>
<p>无连接不可靠                                                                                         面向连接可靠</p>
<p>用于直播、IP电话等                                                                              用于传输文件等</p>
</blockquote>
<h4 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h4><ul>
<li>所谓流量控制（flow control）就是让发送方的发送速率不要太快，要让接收方来得及接收。</li>
<li>利用滑动窗口机制可以很方便地在TCP连接上实现对发送方的流量控制。</li>
</ul>
<h4 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h4><ul>
<li>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就要变坏。这种情况就叫做拥塞(congestion)。</li>
</ul>
<blockquote>
<p>四种拥塞控制算法：</p>
<ul>
<li>慢开始：按指数增加（增长速度快，只是起始比较低），拥塞窗口增大到慢开始门限时，执行拥塞避免算法。</li>
<li>拥塞避免：每次只加一，出现拥塞就将拥塞窗口变成一，再次执行慢开始算法。</li>
<li>快重传：所谓快重传，就是使发送方尽快进行重传，而不是等超时重传计时器超时再重传。<ul>
<li>发送方一旦收到3个连续的重复确认，就将相应的报文段立即重传，而不是等该报文段的超时重传计时器超时再重传。</li>
</ul>
</li>
<li>快恢复：发送方一旦收到3个重复确认，就知道现在只是丢失了个别的报文段。于是不启动慢开始算法，而执行快恢复算法。<ul>
<li>发送方将慢开始门限ssthresh值和拥塞窗口cwnd值调整为当前窗口的一半；开始执行拥塞避免算法。</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="TCP超时重传时间的选择"><a href="#TCP超时重传时间的选择" class="headerlink" title="TCP超时重传时间的选择"></a>TCP超时重传时间的选择</h4><p>往返时间RTT</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210517184548201.png" alt="image-20210517184548201"></p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210517184813181.png" alt="image-20210517184813181"></p>
<p><strong>注意：TCP的通信是全双工通信。通信中的每一方都在发送和接收报文段。</strong></p>
<h4 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a>TCP的运输连接管理</h4><ul>
<li>”三报文握手“建立连接</li>
<li>”四报文挥手“释放连接</li>
</ul>
<p><strong>为啥TCP的控制算法这么多，而UDP却没有提及呢？因为TCP要保证数据传输的可靠啊；UDP不保证可靠，数据掉了与它无瓜。</strong></p>
<h2 id="6-应用层"><a href="#6-应用层" class="headerlink" title="6.应用层"></a>6.应用层</h2><h3 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h3><ul>
<li>应用层是计算机网络体系结构的最顶层，是设计和建立计算机网络的最终目的，也是计算机网络中发展最快的部分。</li>
</ul>
<h3 id="客户-服务器（C-S方式）和对等方式（P2P方式）"><a href="#客户-服务器（C-S方式）和对等方式（P2P方式）" class="headerlink" title="客户/服务器（C/S方式）和对等方式（P2P方式）"></a>客户/服务器（C/S方式）和对等方式（P2P方式）</h3><ul>
<li>C/S方式：客户机是请求方，服务器是服务提供方。常出现服务器跟不上众多客户机请求的情况，所以需要一个强大的服务器集群。</li>
<li>P2P：没有固定的服务请求者和服务提供者，分布在网络边缘各端系统中的应用进程是对等的，被称为对等方。对等方相互之间直接通信，每个对等方既是服务的请求者，又是服务的提供者。（直播，迅雷下载等就用的这个）</li>
</ul>
<h3 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h3><ul>
<li>动态主机配置协议DHCP（Dynamic Host Configuration Protocol）提供了一种机制，称为即插即用连网。这种机制允许一台计算机加入新网络时可自动获取IP地址等网络配置信息而不用手工参与。</li>
<li>DHCP报文在运输层使用UDP协议封装（UDP能广播）</li>
</ul>
<h3 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h3><ul>
<li><p>就是IP地址不好记，所以要搞域名。</p>
</li>
<li><p>域名和IP地址的映射关系必须保存在域名服务器中，供所有其他应用查询。显然不能将所有信息都储存在一台域名服务器中。DNS使用<strong>分布在各地的域名服务器</strong>来实现域名到IP地址的转换。</p>
</li>
<li><p>DNS报文在运输层也是使用UDP协议封装（UDP能广播）</p>
</li>
</ul>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210517202028065.png" alt="image-20210517202028065"></p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210517202944620.png" alt="image-20210517202944620"></p>
<h3 id="文本传送协议FTP"><a href="#文本传送协议FTP" class="headerlink" title="文本传送协议FTP"></a>文本传送协议FTP</h3><ul>
<li>FTP提供交互式的访问，允许客户指明文件的类型与格式（如指明是否使用ASCII码），并允许文件具有存取权限（如访问文件的用户必须经过授权，并输入有效的口令）。</li>
<li>FTP屏蔽了各计算机系统的细节，因而适合于在异构网络中任意计算机之间传送文件。</li>
</ul>
<h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><ul>
<li>电子邮件系统采用基于<strong>TCP连接的客户/服务器</strong>方式。</li>
<li>电子邮件系统的三个主要组成构件：用户代理，邮件服务器，以及电子邮件所需的协议。</li>
<li>通过浏览器登录（提供用户名和口令）邮件服务器万维网网站就可以撰写、收发、阅读和管理电子邮件。这种工作模式与IMAP很类似，不同的是用户计算机无需安装专门的用户代理程序，只需要使用通用的万维网浏览器。</li>
</ul>
<p>有很多邮件发送协议，以下是QQ邮箱中-设置-账号  可采用的协议</p>
<p><img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/image-20210517204453402.png" alt="image-20210517204453402"></p>
<h3 id="万维网www"><a href="#万维网www" class="headerlink" title="万维网www"></a>万维网www</h3><ul>
<li><p>万维网www (World Wide Web）并非某种特殊的计算机网络。它是一个大规模的、联机式的信息储藏所，是运行在因特网上的一个分布式应用。</p>
</li>
<li><p>为了方便地访问在世界范围的文档，万维网使用统一资源定位符URL来指明因特网上任何种类“资源”的位置。</p>
</li>
<li><p>URL的一般形式由以下四个部分组成：==&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;==</p>
</li>
</ul>
<h4 id="超文本传输协议HTTP"><a href="#超文本传输协议HTTP" class="headerlink" title="超文本传输协议HTTP"></a>超文本传输协议HTTP</h4><ul>
<li>HTTP是无状态的协议</li>
<li>cookie是一种对无状态的HTTP进行状态化的技术</li>
</ul>
<p>最后编辑于：2021.05.16</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>HelloMarkdown</title>
    <url>/2021/ckr7yg89u00013sn04ohu0477/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Basic-Markdown-Syntax"><a href="#Basic-Markdown-Syntax" class="headerlink" title="Basic Markdown Syntax"></a>Basic Markdown Syntax</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><blockquote>
<p>区块引用</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<p><code>标记</code></p>
<figure class="highlight c++"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">// 代码块</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">	std::cout &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p><em>斜体</em> <em>斜体</em></p>
<p><strong>粗体</strong> <strong>粗体</strong></p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<hr>
<hr>
<hr>
<ul>
<li><input disabled="" type="checkbox"> a</li>
<li><input checked="" disabled="" type="checkbox"> b</li>
<li><input disabled="" type="checkbox"> c</li>
<li><input disabled="" type="checkbox"> d</li>
</ul>
<p><a href="https://duckduckgo.com/">DuckDuckGo</a></p>
<p><img src="https://upload.wikimedia.org/wikipedia/en/8/88/DuckDuckGo_logo.svg" alt="DuckDuckGo"></p>
<p>typora行内公式：</p>
<p>​    偏好中勾选内联公式，重启后，输入$，按Esc，会自动补上个 ＄，然后在两个＄之间输入公式</p>
<p>如何退出代码块：</p>
<p>​    按两次回车</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown测试</title>
    <url>/2021/ckr7yg8a700093sn02lyjg3dn/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><hr>
<h3 id="1-斜体和粗体"><a href="#1-斜体和粗体" class="headerlink" title="1. 斜体和粗体"></a>1. 斜体和粗体</h3><p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<span id="more"></span>

<h3 id="2-分级标题"><a href="#2-分级标题" class="headerlink" title="2. 分级标题"></a>2. 分级标题</h3><p>使用 === 表示一级标题，使用 — 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></tbody></table></figure>

<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-外链接"><a href="#3-外链接" class="headerlink" title="3. 外链接"></a>3. 外链接</h3><p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="https://xkstart.xyz/">本人博客</a> 的链接。</p>
<h3 id="4-无序列表"><a href="#4-无序列表" class="headerlink" title="4. 无序列表"></a>4. 无序列表</h3><p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-有序列表"><a href="#5-有序列表" class="headerlink" title="5. 有序列表"></a>5. 有序列表</h3><p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-文字引用"><a href="#6-文字引用" class="headerlink" title="6. 文字引用"></a>6. 文字引用</h3><p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-行内代码块"><a href="#7-行内代码块" class="headerlink" title="7. 行内代码块"></a>7. 行内代码块</h3><p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-代码块"><a href="#8-代码块" class="headerlink" title="8.  代码块"></a>8.  代码块</h3><p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre>
<h3 id="9-插入图像"><a href="#9-插入图像" class="headerlink" title="9.  插入图像"></a>9.  插入图像</h3><p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<p><img src="https://avatars.githubusercontent.com/u/63174941?s=400&amp;u=4584dd602e791aca03b15222ac8f0d2daf7dc7c2&amp;v=4" alt="我的头像"></p>
<h1 id="Cmd-Markdown-高阶语法手册"><a href="#Cmd-Markdown-高阶语法手册" class="headerlink" title="Cmd Markdown 高阶语法手册"></a>Cmd Markdown 高阶语法手册</h1><h3 id="1-内容目录"><a href="#1-内容目录" class="headerlink" title="1. 内容目录"></a>1. 内容目录</h3><p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="2-标签分类"><a href="#2-标签分类" class="headerlink" title="2. 标签分类"></a>2. 标签分类</h3><p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="3-删除线"><a href="#3-删除线" class="headerlink" title="3. 删除线"></a>3. 删除线</h3><p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="4-注脚"><a href="#4-注脚" class="headerlink" title="4. 注脚"></a>4. 注脚</h3><p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚[^footnote]的样例。</p>
<p>这是第二个注脚[^footnote2]的样例。</p>
<h3 id="5-LaTeX-公式"><a href="#5-LaTeX-公式" class="headerlink" title="5. LaTeX 公式"></a>5. LaTeX 公式</h3><p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>$$\sum^{j-1}<em>{k=0}{\widehat{\gamma}</em>{kj} z_k}$$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">MathJax</a> 参考更多使用方法。</p>
<h3 id="6-加强的代码块"><a href="#6-加强的代码块" class="headerlink" title="6. 加强的代码块"></a>6. 加强的代码块</h3><p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">$ sudo apt-get install vim-gnome</span><br></pre></td></tr></tbody></table></figure>

<p>Python 示例：</p>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">''</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></tbody></table></figure>

<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) {</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></tbody></table></figure>

<h3 id="7-流程图"><a href="#7-流程图" class="headerlink" title="7. 流程图"></a>7. 流程图</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">st=&gt;start: Start:&gt;https://www.zybuluo.com</span><br><span class="line">io=&gt;inputoutput: verification</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">sub=&gt;subroutine: Your Subroutine</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></tbody></table></figure>

<h4 id="更多语法参考：流程图语法参考"><a href="#更多语法参考：流程图语法参考" class="headerlink" title="更多语法参考：流程图语法参考"></a>更多语法参考：<a href="http://adrai.github.io/flowchart.js/">流程图语法参考</a></h4><h3 id="8-序列图"><a href="#8-序列图" class="headerlink" title="8. 序列图"></a>8. 序列图</h3><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></tbody></table></figure>

<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></tbody></table></figure>

<h4 id="更多语法参考：序列图语法参考"><a href="#更多语法参考：序列图语法参考" class="headerlink" title="更多语法参考：序列图语法参考"></a>更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/">序列图语法参考</a></h4><h3 id="9-甘特图"><a href="#9-甘特图" class="headerlink" title="9. 甘特图"></a>9. 甘特图</h3><p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></tbody></table></figure>

<h4 id="更多语法参考：甘特图语法参考"><a href="#更多语法参考：甘特图语法参考" class="headerlink" title="更多语法参考：甘特图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams">甘特图语法参考</a></h4><h3 id="10-Mermaid-流程图"><a href="#10-Mermaid-流程图" class="headerlink" title="10. Mermaid 流程图"></a>10. Mermaid 流程图</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C{Decision}</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></tbody></table></figure>

<h4 id="更多语法参考：Mermaid-流程图语法参考"><a href="#更多语法参考：Mermaid-流程图语法参考" class="headerlink" title="更多语法参考：Mermaid 流程图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax">Mermaid 流程图语法参考</a></h4><h3 id="11-Mermaid-序列图"><a href="#11-Mermaid-序列图" class="headerlink" title="11. Mermaid 序列图"></a>11. Mermaid 序列图</h3><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure>

<h4 id="更多语法参考：Mermaid-序列图语法参考"><a href="#更多语法参考：Mermaid-序列图语法参考" class="headerlink" title="更多语法参考：Mermaid 序列图语法参考"></a>更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams">Mermaid 序列图语法参考</a></h4><h3 id="12-表格支持"><a href="#12-表格支持" class="headerlink" title="12. 表格支持"></a>12. 表格支持</h3><table>
<thead>
<tr>
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody><tr>
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr>
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr>
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody></table>
<h3 id="13-定义型列表"><a href="#13-定义型列表" class="headerlink" title="13. 定义型列表"></a>13. 定义型列表</h3><dl><dt>名词 1</dt><dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><dl><dt>代码块 2</dt><dd>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</dd></dl><pre><code>    代码块（左侧有八个不可见的空格）
</code></pre>
<h3 id="14-Html-标签"><a href="#14-Html-标签" class="headerlink" title="14. Html 标签"></a>14. Html 标签</h3><p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan="2"&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
<table>
    <tbody><tr>
        <th rowspan="2">值班人员</th>
        <th>星期一</th>
        <th>星期二</th>
        <th>星期三</th>
    </tr>
    <tr>
        <td>李强</td>
        <td>张明</td>
        <td>王平</td>
    </tr>
</tbody></table>

<h3 id="15-内嵌图标"><a href="#15-内嵌图标" class="headerlink" title="15. 内嵌图标"></a>15. 内嵌图标</h3><p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class="icon-weibo"&gt;&lt;/i&gt;
</code></pre>
<p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class="icon-renren"&gt;&lt;/i&gt;
</code></pre>
<p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/">font-awesome</a> 官方网站。</p>
<h3 id="16-待办事宜-Todo-列表"><a href="#16-待办事宜-Todo-列表" class="headerlink" title="16. 待办事宜 Todo 列表"></a>16. 待办事宜 Todo 列表</h3><p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票
</code></pre>
<p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li><input disabled="" type="checkbox"> <strong>Cmd Markdown 开发</strong><ul>
<li><input disabled="" type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li><input disabled="" type="checkbox"> 支持以 PDF 格式导出文稿</li>
<li><input checked="" disabled="" type="checkbox"> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments">语法参考</a></li>
<li><input checked="" disabled="" type="checkbox"> 改进 LaTex 功能<ul>
<li><input checked="" disabled="" type="checkbox"> 修复 LaTex 公式渲染问题</li>
<li><input checked="" disabled="" type="checkbox"> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers">语法参考</a></li>
</ul>
</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> <strong>七月旅行准备</strong><ul>
<li><input disabled="" type="checkbox"> 准备邮轮上需要携带的物品</li>
<li><input disabled="" type="checkbox"> 浏览日本免税店的物品</li>
<li><input checked="" disabled="" type="checkbox"> 购买蓝宝石公主号七月一日的船票</li>
</ul>
</li>
</ul>
<p>[^footnote]: 这是一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
<p>[^footnote2]: 这是另一个 <em>注脚</em> 的 <strong>文本</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2021/ckr7yg8a500073sn062adbf6a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>手机摄影学习笔记</title>
    <url>/2021/shoujisheying/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>买个好点的手机吧<span class="github-emoji"><span>😮</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>
]]></content>
      <categories>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>随笔</tag>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>太瘦了</title>
    <url>/2021/ckr7yg8am000t3sn0h6952ah7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="因"><a href="#因" class="headerlink" title="因"></a>因</h2><p>在五月份的时候，我打算练个腹肌出来，但是我只喜欢跑步，而且在宿舍里也不好练一些练腹肌的动作</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>然后就开始操作了，从五月五号开始，到五月份结束，中间断断续续的跑了12天，每天四公里。饮食：早上起来了就吃早餐；中午随意吃，不过不加饭了，食堂阿姨盛多少饭就吃多少；晚上吃3-4片全麦面包或者2-3个馒头，如果当天晚上不跑步就想吃啥吃啥，如麻辣烫<span class="github-emoji"><span>😏</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>；每天摄入两杯咖啡（24g咖啡豆的量）。除此之外就没有其他能量摄入了，也没有其他额外运动了，没有课我就待在寝室。</p>
<h2 id="果"><a href="#果" class="headerlink" title="果"></a>果</h2><p>算是成功了吧，确实是有腹肌了，但是，我觉得就是瘦出来的，我那一顿操作下来，我从120斤变成了，105斤。emm这个体重对我来说不是很友好。所以，想减肥的同志们啊，坚持就是胜利。</p>
<img src="https://gitee.com/yueshang-anran/jpg/raw/master/img/8F6D35649AE3E879A185642CD1759883.jpg" alt="img" style="zoom: 33%;">

]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>体重</tag>
      </tags>
  </entry>
  <entry>
    <title>静享云南慢时光</title>
    <url>/2020/yunnan/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>从云南回来正好一个月的时间，决定在还没有遗忘旅行的细节前将这次云南之旅记录下来，毕竟这是难得的一次全程由自己做攻略的旅行经历。尽量以时间线的顺序进行记录，防止遗漏，过程可能有流水账之嫌，事无巨细，哈哈哪怕没人看我想我们两个看的时候都会笑出声，尤其是以我的zz小伙伴那种老年痴呆患者的记性。整个旅途我们可以说是很舒服很愉快的，但依旧有值得注意的地方。</p>
<span id="more"></span>

<p>编不下去了，身为穷逼的我，哪里有钱去旅游。</p>
]]></content>
      <categories>
        <category>旅行</category>
        <category>国内</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>国内</tag>
      </tags>
  </entry>
</search>
